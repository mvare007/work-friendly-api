================================================================= LOGIN =================================================================

To login the user on the OAuth endpoint, we need to send a HTTP POST request to /oauth/token, with grant_type, email, password, client_id and client_secret attributes.

As we are using password in exchange for OAuth access and refresh token, the grant_type value should be a password - email and password is the login credential of the user.
client_id is the uid of the Doorkeeper::Application (OAuth application), with this we can identify which client the user has used to log in.

- Example:
{
	"grant_type": password,
	"email": username@email.com,
	"client_id": Doorkeeper::Application.uid,
	"client_secret": Doorkeeper::Application.secret
}

On successful login attempt, the API will return access_token, refresh_token, token_type, expires_in and created_at attributes.

We can then use access_token to call protected API that requires user authentication.

refresh_token can be used to generate and retrieve a new access token after the current access_token has expired.
expires_in is the time until expiry for the access_token, starting from the UNIX timestamp of created_at, the default value is 7200 (seconds), which is around 2 hours. We have set it to 3 days.



================================================================= LOGOUT =================================================================

To log out a user, we can revoke the access token, so that the same access token cannot be used anymore.

To revoke an access token, we need to send a HTTP POST request to /oauth/revoke, with token, client_id and client_secret attributes.

- Example:
{
	"token": token,
	"client_id": Doorkeeper::Application.uid,
	"client_secret": Doorkeeper::Application.secret
}

Other than these attributes, we also need to set Authorization header for the HTTP request to use Basic Auth, using client_id value for the username and client_password value for the password.
See: https://github.com/doorkeeper-gem/doorkeeper/issues/1412#issuecomment-631938006


================================================================= REFRESH TOKEN =================================================================

To retrieve a new access token when the current access token is (almost) expired, we can send a HTTP POST to /oauth/token , it is the same endpoint as login, but this time we are using “refresh_token” as the value for grant_type,
and is sending the value of refresh token instead of login credentials.

To refresh a token, we need to send grant_type, refresh_token, client_id and client_secret attributes.

grant_type needs to be equal to “refresh_token” here as we are using refresh token to authenticate.

refresh_token should be the refresh token value you have retrieved during login.

client_id is the uid of the Doorkeeper::Application (OAuth application) we created earlier.

client_secret is the secret of the Doorkeeper::Application (OAuth application) we created earlier.

- Example:
{
	"grant_type": refresh_token,
	"email": username@email.com,
	"client_id": Doorkeeper::Application.uid,
	"client_secret": Doorkeeper::Application.secret
}

On successful refresh attempt, the API return a new access_token and refresh_token, which we can use to call protected API that requires user authentication.